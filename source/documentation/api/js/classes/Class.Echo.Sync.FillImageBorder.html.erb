
<ul class="breadcrumb">
    <li>
    Echo.Sync
  </li>
    <li class="active">
    FillImageBorder
  </li>
</ul>


<dl>
<dt><strong>Class Hierarchy:</strong></dt>
<dd>
<ul>
<li>Object</li>
<li style="margin-left: 15px">
<code><a href="Class.Echo.Sync.FillImageBorder">Echo.Sync.FillImageBorder</a></code>
</li>
</ul>
</dd>
</dl>




<p><p>Provides tools for rendering fill image border properties (borders composed of eight graphic images).</p><p>A relative-positioned DIV may be added to the created FillImageBorder container DIV. Note that you should ALWAYS set the "zoom" CSS property to 1 to workaround "hasLayout" bugs in Internet Explorer's rendering engine. Use the following code to set this property on any relative positioned DIVs you create: <code>if (Core.Web.Env.QUIRK_IE_HAS_LAYOUT) { div.style.zoom = 1; }</code>. See http://msdn.microsoft.com/en-us/library/bb250481.aspx</p></p>







<table class="table">
<colgroup>
<col width="18%">
<col width="82%">
</colgroup>
<tr>
<th colspan="2">Class Field Summary</th>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._NAMES">_NAMES</a></code><br/>
Mapping between child node indices of container element and fill image property names of a FillImageBorder.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._MAP">_MAP</a></code><br/>
Two dimensional mapping array representing which FillImageBorder side configurations have which elements.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._PROTOTYPES">_PROTOTYPES</a></code><br/>
Prototype storage.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Field.order">order</a></code><br/>

</td>
</tr>
</table>
<br/>


<table class="table">
<colgroup>
<col width="18%">
<col width="82%">
</colgroup>
<tr>
<th colspan="2">Class Method Summary</th>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Method._createSegment">_createSegment(parent, css)</a></code><br/>
Generates a segment of a rendered FillImageBorder DOM and adds it to its parent.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Method._createPrototype">_createPrototype(key)</a></code><br/>
Creates a prototype rendered DOM element hierarchy to display a fill image border.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.getBorder">getBorder()</a></code><br/>

</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.getContainerContent">getContainerContent(containerDiv)</a></code><br/>
Returns the content element (to which children may be added) of a FillImageBorder container element created with
<code>renderContainer()</code>.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.renderContainer">renderContainer(fillImageBorder, configuration)</a></code><br/>
Creates a DOM hierarchy representing a FillImageBorder.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.renderContainerDisplay">renderContainerDisplay(containerDiv)</a></code><br/>
Performs renderDisplay() operations on a FillImageBorder container DOM hierarchy.
</td>
</tr>
</table>
<br/>











<a name="Constructor"></a>




<div class="Header">Class Method Detail</div>

<a name="Method._createSegment"></a>
<span class="DetailPropertyName">_createSegment</span>

<dl>
<dd>Generates a segment of a rendered FillImageBorder DOM and adds it to its parent.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>parent</code> 
<em>(Element)</em>
- the parent element</dd>
<dd>
<code>css</code> 
<em>(String)</em>
- the CSS text add to the rendered element</dd>
</dl>


</dd>
</dl>
<hr/>
<a name="Method._createPrototype"></a>
<span class="DetailPropertyName">_createPrototype</span>

<dl>
<dd>Creates a prototype rendered DOM element hierarchy to display a fill image border.
The values returned by this method are stored and cloned for performance.
This method will be invoked at most 16 times, once per key (0-15).

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>key</code> 
- the fill image border key, any combination of the following values ORed together:
       <ul>
        <li><code>1</code>: bit indicating the top border should be rendered</li> 
        <li><code>2</code>: bit indicating the right border should be rendered</li> 
        <li><code>4</code>: bit indicating the bottom border should be rendered</li> 
        <li><code>8</code>: bit indicating the left border should be rendered</li> 
       </li></dd>
</dl>

<dl>
<dt><strong>Returns:</strong></dt>
<dd>

the created border prototype
</dd>

</dl>

</dd>
</dl>
<hr/>
<a name="Method.getBorder"></a>
<span class="DetailPropertyName">getBorder</span>

<dl>
<dd>



</dd>
</dl>
<hr/>
<a name="Method.getContainerContent"></a>
<span class="DetailPropertyName">getContainerContent</span>

<dl>
<dd>Returns the content element (to which children may be added) of a FillImageBorder container element created with
<code>renderContainer()</code>.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>containerDiv</code> 
<em>(Element)</em>
- the container element generated by <code>renderContainer()</code></dd>
</dl>

<dl>
<dt><strong>Returns:</strong></dt>
<dd>
<em>(Element)</em>

the content element to which child nodes may be added
</dd>

</dl>

</dd>
</dl>
<hr/>
<a name="Method.renderContainer"></a>
<span class="DetailPropertyName">renderContainer</span>

<dl>
<dd>Creates a DOM hierarchy representing a FillImageBorder.
The provided childElement will be added to it, if specified.
The outer container DIV element of the rendered DOM hierarchy is returned.  Width and height values may be configured
on this returned value.

The <code>renderContainerDisplay()</code> method should be invoked by the <code>renderDisplay()</code> method of any
synchronization peer making use of a rendered FillImageBorder container in order to support Internet Explorer 6 browsers
(the rendered border uses virtual positioning to appear properly in IE6).

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>fillImageBorder</code> 
<em>(#FillImageBorder)</em>
- the FillImageBorder to be rendered.</dd>
<dd>
<code>configuration</code> 
- (optional) configuration options, an object containing one or more of the following properties:
       <ul>
        <li><code>update</code>: the containerDiv to update (normally null, which will result in a new one being
         created; note that it is less efficient to update a container than to create a new one; currently does not 
         support adding content)</li>
        <li><code>content</code>: flag indicating that a content element should be created/managed (implied by child)</li>
        <li><code>child</code>: a content element to added inside the border (implies content)</li>
        <li><code>absolute</code>: boolean flag indicating whether the DIV shold be absolutely (true) or relatively
        (false) positioned</li>
       </ul></dd>
</dl>

<dl>
<dt><strong>Returns:</strong></dt>
<dd>
<em>(Element)</em>

the outer container DIV element of the rendered DOM hierarchy
</dd>

</dl>

</dd>
</dl>
<hr/>
<a name="Method.renderContainerDisplay"></a>
<span class="DetailPropertyName">renderContainerDisplay</span>

<dl>
<dd>Performs renderDisplay() operations on a FillImageBorder container DOM hierarchy.
This method should be invoked the renderDisplay() method of a synchronization peer on each FillImageBorder container
which it is using.  It is required for IE6 virtual positioning support.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>containerDiv</code> 
<em>(Element)</em>
- the container element generated by <code>renderContainer()</code></dd>
</dl>


</dd>
</dl>
<hr/>





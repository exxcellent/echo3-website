
<ul class="breadcrumb">
    <li>
    Extras.Sync
  </li>
    <li class="active">
    Animation
  </li>
</ul>

<span class="badge badge-important">Abstract</span>

<dl>
<dt><strong>Class Hierarchy:</strong></dt>
<dd>
<ul>
<li>Object</li>
<li style="margin-left: 15px">
<code><a href="Class.Extras.Sync.Animation">Extras.Sync.Animation</a></code>
</li>
</ul>
</dd>
</dl>

<dl>
<dt><strong>Direct Known Subclasses:</strong></dt>
<dd>
<code><a href="Class.Extras.Sync.AccordionPane.Rotation">Extras.Sync.AccordionPane.Rotation</a></code>, <code><a href="Class.Extras.Sync.CalendarSelect.Animation">Extras.Sync.CalendarSelect.Animation</a></code>, <code><a href="Class.Extras.Sync.Menu.RenderedMenu.FadeAnimation">Extras.Sync.Menu.RenderedMenu.FadeAnimation</a></code>, <code><a href="Class.Extras.Sync.TransitionPane.Transition">Extras.Sync.TransitionPane.Transition</a></code></dd>
</dl>



<p><p>Abstract base class for timed animated effects. Animation developer provides initialization, step, and completion methods.</p></p>











<table class="table">
<colgroup>
<col width="18%">
<col width="82%">
</colgroup>
<tr>
<th colspan="2">Instance Field Summary</th>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Field.stepIndex">stepIndex</a></code><br/>
The current animation step index.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Field.startTime">startTime</a></code><br/>
The actual start time of the animation (milliseconds since the epoch, i.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Field.endTime">endTime</a></code><br/>
The calculated end time of the animation (milliseconds since the epoch, i.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._listenerList">_listenerList</a></code><br/>
Listener management object.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._runnable">_runnable</a></code><br/>
Runnable used to render animation over time.
</td>
</tr>
<tr>
<td>
Public
Virtual
</td>
<td><code><a class="PropertySummaryLink" href="#Field.runTime">runTime</a></code><br/>
The runtime, in milliseconds of the animation.
</td>
</tr>
<tr>
<td>
Public
Virtual
</td>
<td><code><a class="PropertySummaryLink" href="#Field.sleepInterval">sleepInterval</a></code><br/>
Sleep interval, in milliseconds.
</td>
</tr>
</table>
<br/>


<table class="table">
<colgroup>
<col width="18%">
<col width="82%">
</colgroup>
<tr>
<th colspan="2">Instance Method Summary</th>
</tr>
<tr>
<td>
Public
Abstract
</td>
<td><code><a class="PropertySummaryLink" href="#Method.init">init()</a></code><br/>
Initializes the animation.
</td>
</tr>
<tr>
<td>
Public
Abstract
</td>
<td><code><a class="PropertySummaryLink" href="#Method.complete">complete(abort)</a></code><br/>
Completes the animation.
</td>
</tr>
<tr>
<td>
Public
Abstract
</td>
<td><code><a class="PropertySummaryLink" href="#Method.step">step(progress)</a></code><br/>
Renders a step within the animation.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Method._doStep">_doStep()</a></code><br/>
Invoked by runnable to process a step of the animation.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.abort">abort()</a></code><br/>
Aborts an in-progress animation.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.start">start(completeMethod)</a></code><br/>
Starts the animation.
</td>
</tr>
</table>
<br/>







<a name="Constructor"></a>






<div class="Header">Instance Method Detail</div>

<a name="Method.init"></a>
<span class="DetailPropertyName">init</span>

<dl>
<dd>Initializes the animation.  This method will always be invoked internally, it should not be manually invoked.
This method will be invoked before the <code>step()</code> method.  This method may never be invoked if
the animation is immediately aborted or the allotted run time has expired.



</dd>
</dl>
<hr/>
<a name="Method.complete"></a>
<span class="DetailPropertyName">complete</span>

<dl>
<dd>Completes the animation.  This method will always be invoked internally, it should not be manually invoked.
This method will always be invoked to finish the animation and/or clean up its resources, even if the animation 
was aborted.  Implementations of this method should render the animation in its completed state.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>abort</code> 
<em>(Boolean)</em>
- a flag indicating whether the animation aborted, true indicating it was aborted, false indicating
       it completed without abort</dd>
</dl>


</dd>
</dl>
<hr/>
<a name="Method.step"></a>
<span class="DetailPropertyName">step</span>

<dl>
<dd>Renders a step within the animation.  This method will always be invoked internally, it should not be manually invoked.
The implementation should not attempt to check if the animation is finished, as this work should be done in the
<code>complete()</codE> method.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>progress</code> 
<em>(Number)</em>
- a decimal value between 0 and 1 indicating the progress of the animation.</dd>
</dl>


</dd>
</dl>
<hr/>
<a name="Method._doStep"></a>
<span class="DetailPropertyName">_doStep</span>

<dl>
<dd>Invoked by runnable to process a step of the animation.



</dd>
</dl>
<hr/>
<a name="Method.abort"></a>
<span class="DetailPropertyName">abort</span>

<dl>
<dd>Aborts an in-progress animation.  The <code>complete()</code> method will be invoked.



</dd>
</dl>
<hr/>
<a name="Method.start"></a>
<span class="DetailPropertyName">start</span>

<dl>
<dd>Starts the animation.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>completeMethod</code> 
<em>(Function)</em>
- a function to execute when the animation has completed (it will be passed a boolean
       value of true or false to indicate whether animation was aborted (true) or not (false))</dd>
</dl>


</dd>
</dl>
<hr/>



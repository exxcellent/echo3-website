
<ul class="breadcrumb">
    <li>
    Echo.Sync <span class="divider">/</span>
  </li>
    <li>
    Border
  </li>
</ul>


<dl>
<dt><strong>Class Hierarchy:</strong></dt>
<dd>
<ul style="padding-left: 0px">
<li style="margin-left: 0px">Object</li>
<li style="margin-left: 15px">
<code><a href="Class.Echo.Sync.Border">Echo.Sync.Border</a></code>
</li>
</ul>
</dd>
</dl>




<p>Provides tools for rendering border properties.</p>







<table class="table">
<colgroup>
<col width="18%">
<col width="82%">
</colgroup>
<tr>
<th colspan="2">Class Field Summary</th>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._PARSER_PX">_PARSER_PX</a></code><br/>
Regular expression to validate/parse a CSS border expression, e.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._PARSER">_PARSER</a></code><br/>
Regular expression to validate/parse a pixel-based CSS border expression, e.
</td>
</tr>
<tr>
<td>
Internal
</td>
<td><code><a class="PropertySummaryLink" href="#Field._TEST_EXTENT_PX">_TEST_EXTENT_PX</a></code><br/>
Regular expression to test whether an extent string is a properly formatted integer pixel value.
</td>
</tr>
</table>
<br/>


<table class="table">
<colgroup>
<col width="18%">
<col width="82%">
</colgroup>
<tr>
<th colspan="2">Class Method Summary</th>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.compose">compose(size, the, the)</a></code><br/>
Creates a border property from a size, style, and color.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.isMultisided">isMultisided(border)</a></code><br/>
Determines if a border is multisided.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.parse">parse(border)</a></code><br/>
Parses a border into size, style, and color components.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.render">render(border, the, styleAttribute)</a></code><br/>
Renders a border to a DOM element.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.renderClear">renderClear(border, the, styleAttribute)</a></code><br/>
Renders a border to a DOM element, clearing an existing border if the border value is null.
</td>
</tr>
<tr>
<td>
Public
</td>
<td><code><a class="PropertySummaryLink" href="#Method.getPixelSize">getPixelSize(border, sideName)</a></code><br/>
Determines the size of a particular side of the border in pixels.
</td>
</tr>
</table>
<br/>











<a name="Constructor"></a>




<div class="Header">Class Method Detail</div>

<a name="Method.compose"></a>
<span class="DetailPropertyName">compose</span>

<dl>
<dd>Creates a border property from a size, style, and color.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>size</code> 
<em>(#Extent)</em>
- the border size</dd>
<dd>
<code>the</code> 
<em>(String)</em>
- border style</dd>
<dd>
<code>the</code> 
<em>(#Color)</em>
- border color</dd>
</dl>

<dl>
<dt><strong>Returns:</strong></dt>
<dd>
<em>(#Border)</em>

a border object
</dd>

</dl>

</dd>
</dl>
<hr/>
<a name="Method.isMultisided"></a>
<span class="DetailPropertyName">isMultisided</span>

<dl>
<dd>Determines if a border is multisided.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>border</code> 
<em>(#Border)</em>
- the border to analyze</dd>
</dl>

<dl>
<dt><strong>Returns:</strong></dt>
<dd>
<em>(Boolean)</em>

true if the border is multisided
</dd>

</dl>

</dd>
</dl>
<hr/>
<a name="Method.parse"></a>
<span class="DetailPropertyName">parse</span>

<dl>
<dd>Parses a border into size, style, and color components.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>border</code> 
<em>(#Border)</em>
- the border to parse</dd>
</dl>

<dl>
<dt><strong>Returns:</strong></dt>
<dd>

an object containing size, style, and color properties of the border
</dd>

</dl>

</dd>
</dl>
<hr/>
<a name="Method.render"></a>
<span class="DetailPropertyName">render</span>

<dl>
<dd>Renders a border to a DOM element.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>border</code> 
<em>(#Border)</em>
- the border to render</dd>
<dd>
<code>the</code> 
<em>(Element)</em>
- target DOM element</dd>
<dd>
<code>styleAttribute</code> 
<em>(String)</em>
- the CSS style attribute name (defaults to "border" if omitted)</dd>
</dl>


</dd>
</dl>
<hr/>
<a name="Method.renderClear"></a>
<span class="DetailPropertyName">renderClear</span>

<dl>
<dd>Renders a border to a DOM element, clearing an existing border if the border value is null.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>border</code> 
<em>(#Border)</em>
- the border to render</dd>
<dd>
<code>the</code> 
<em>(Element)</em>
- target DOM element</dd>
<dd>
<code>styleAttribute</code> 
<em>(String)</em>
- the CSS style attribute name (defaults to "border" if omitted)</dd>
</dl>


</dd>
</dl>
<hr/>
<a name="Method.getPixelSize"></a>
<span class="DetailPropertyName">getPixelSize</span>

<dl>
<dd>Determines the size of a particular side of the border in pixels.

<dl>
<dt><strong>Parameters:</strong></dt>
<dd>
<code>border</code> 
<em>(#Border)</em>
- the border</dd>
<dd>
<code>sideName</code> 
<em>(String)</em>
- , the border side name, "left", "right", "bottom", or "top" (defaults to "top" if omitted)</dd>
</dl>

<dl>
<dt><strong>Returns:</strong></dt>
<dd>
<em>(Number)</em>

the border size in pixels
</dd>

</dl>

</dd>
</dl>
<hr/>





---
title: About
---

## About Echo3

<blockquote>
<p>
Echo is an open-source framework for developing rich web applications. From the 
developer's perspective, Echo behaves as a user interface toolkit -- like Swing or 
Eclipse SWT. 

AJAX technology is employed to deliver a user experience to web clients that 
approaches that of desktop-based applications. Echo applications can be created 
entirely in server-side Java code using a component-oriented and event-driven 
API or as client-side applications written in JavaScript.
</p>
</blockquote>

### Why Echo?

Though MVC and Swing are well established and well known, most web application
frameworks on the market are still stuck in the paradigm of page-flow oriented
design principles and require a heavy mixture of different technologies like
XML, Java, JSP, Tag libraries, etc.
This has heavy implications on the development process as it disables full
reuse but requires to generate, write and maintain many different artifacts
during the whole process. Think of JSP template files, XML based page flow
descriptions, required form beans, and so on: All of these must be written,
maintained and kept in sync for every dialog of your project.

In contrast Echo offers a very efficient and sophisticated way to implement
and design complex real-world applications in pure Java, enabling to fully
leverage modern software design principles like inheritance, component-
oriented design, refactoring and all the others without making a stop on the
web tier.

**TODO: Echo compared to similar frameworks**

### Features

<div style="min-height: 300px" class="tabbable"> 
  <ul class="nav nav-tabs">
    <li class="active"><a href="#tab1" data-toggle="tab">Server-Side Java</a></li>
    <li><a href="#tab2" data-toggle="tab">Client-Side JavaScript</a></li>
    <li><a href="#tab3" data-toggle="tab">Improved User Experience</a></li>
    <li><a href="#tab4" data-toggle="tab">Java-Like development on Client-Side</a></li>
    <li><a href="#tab5" data-toggle="tab">Automatic Serialization</a></li>
    <li><a href="#tab6" data-toggle="tab">Free and Open-Source</a></li>
  </ul>
  <div style="margin-top: 5px; padding: 5px" class="tab-content">
    <div class="tab-pane active" id="tab1">
      <div class="row">
	  	<div class="col-lg-6">
	  	  <p>Echo provides an entirely Java-based API for application development. The 
		  Server-side framework makes use of a derivative of the client-side framework 
		  to render the state of the server-side application remotely.</p>
		  
		  <p>The only exception which requires JavaScript knowledge is in the case where the 
		  developer wishes to extend the framework by creating components that render 
		  custom XML/HTML/JavaScript code.</p>
	  	</div>
	  	<div class="col-lg-6">
	  	
			<div class="highlight java "><div class="scroller"><div class="CodeRay"><div class="code">
<pre>
<span class="directive">public</span> <span class="type">class</span> <span class="class">HelloWorldApp</span> <span class="directive">extends</span> ApplicationInstance {
    <span class="directive">public</span> <span class="predefined-type">Window</span> init() {
        <span class="predefined-type">Window</span> window = <span class="keyword">new</span> <span class="predefined-type">Window</span>();

        ContentPane contentPane = <span class="keyword">new</span> ContentPane();
        window.setContent(contentPane);

        <span class="predefined-type">Label</span> label = <span class="keyword">new</span> <span class="predefined-type">Label</span>(<span class="string"><span class="delimiter">"</span><span class="content">Hello, world!</span><span class="delimiter">"</span></span>);
        contentPane.add(label);

        <span class="keyword">return</span> window;
    }
}
</pre></div></div></div></div>
	  		<div class="text-center"><small>Echo3 Hello World application in Java</small></div>
	  	</div>
	  </div>
    </div>
    <div class="tab-pane" id="tab2">
		<div class="row">
	  		<div class="col-lg-6">
				
				 <p>The entirity of the Echo framework has been ported to JavaScript, such that 
				  applications may be developed entirely in JavaScript and function entirely 
				  without any server round trips. This allows to shift between Server-Side and 
				  Client-Side Web Application paradigms. 
				  The API of the client-side version is similar to the server-side framework.</p> 
				  
				<ul>
					<li><strong>Delayed Batch Rendering:</strong>  
				    <p>The client application framework renders changes to its component hierarchy 
				    in batches. This strategy increases rendering efficiency and eliminates 
				    potential screen flickering issues.</p></li>
				  
					<li><strong>Application Rendered Components (ARCs):</strong>
					<p>
				    Client-side component synchronization peers may render components to HTML 
				    by creating a container HTML element (e.g. a DIV) and then loading a 
				    new client-side-only Echo application within the DIV. The Echo3Extras Rich 
				    Text Editor uses this feature to display a MenuBarPane, WindowPane-based 
				    dialogs, ColorSelects, toolbars and other UI elements. By writing the Rich 
				    Text Editor as a client-side Echo application, much time was saved and the 
				    editor is far more feature rich.</p></li>
				</ul>      
		
			</div>
			<div class="col-lg-6">

				<div class="highlight javascript "><div class="scroller"><div class="CodeRay"><div class="code">
<pre>
HelloWorldApp = Core.extend(Echo.Application, {

    <span class="predefined">$construct</span>: <span class="keyword">function</span>() {
        Echo.Application.call(<span class="local-variable">this</span>);
        <span class="keyword">var</span> label = <span class="keyword">new</span> Echo.Label({
            <span class="key">text</span>: <span class="string"><span class="delimiter">"</span><span class="content">Hello, world!</span><span class="delimiter">"</span></span>
        });
        <span class="local-variable">this</span>.rootComponent.add(label);
    }
});
</pre></div></div></div></div>
				<div class="text-center"><small>Echo3 Hello World application in JavaScript (using CoreJS constructs)</small></div>
		

				</div> <!-- col -->
		</div> <!-- row -->
    </div>
    <div class="tab-pane" id="tab3">

		    	<ul>
				<li><strong>Improved Layout Engine:</strong>   
				    <p>Echo3 features an improved layout engine which can automatically size 
				    components to their content (e.g., WindowPanes and SplitPanes).</p>
				   </li>
				<li><strong>Reduced Bandwidth:</strong>   
				    <p>Echo3 uses approximately 30-40% of the bandwidth of a comparable Echo2 
				    application and much less compared to classic page-oriented applications.</p>
				    </li> 
				<li><strong>Reduced Server Load:</strong>   
				    <p>Due to the fact that the server is no longer rendering HTML, it has quite 
				    a bit less work to do. The reduced bandwidth usage means less server CPU 
				    and memory utilization for rendering.</p>
				    </li>
				<li><strong>Keyboard Navigation / Focus Management:</strong>   
				    <p>Focus amongst components is now fully tracked. Echo does away with the 
				    practice of using sequential tab index numbers to control focus order, 
				    instead presenting next/previous element focus events to components for a 
				    more intuitive user interface. Components that have multiple "focus points" 
				    especially benefit from this feature.</p>
				    </li>
				</ul>

    </div>
    <div class="tab-pane" id="tab4">
		  <p>Echo3 is built atop the CoreJS JavaScript Library, which provides cross-platform APIs
		  for building JavaScript objects and interfacing with web browser features (CSS/DOM).</p> 
		
		  <p>The CoreJS Library imposes no dependencies or modifications to existing
		  JavaScript namespaces and provides the following features:</p>
		
		  <ul>
		   <li>Class-based JavaScript Inheritance</li>  
		   <li>Virtual and Final JavaScript Properties</li> 
		   <li>Method References</li>
		  </ul>

    </div>
    
 	<div class="tab-pane" id="tab5">
 		  <p>Data objects sent between client and server can be automatically serialized 
		  between Java, XML, and JavaScript. The serialization architecture is 
		  extensible--serialization code for new object types may be added by the 
		  developer.</p>
		 
		  <p>Serializing components and commands between client and server is performed 
		  automatically using the built-in serialization architecture. The component 
		  developer only need specify which properties should be sent (for components, 
		  all local style properties are automatically sent).</p>
 	</div>
 	
 	 <div class="tab-pane" id="tab6">
 		<p>
 		Echo is licensed under the terms of the open-source Mozilla Public License.
 		The terms of the Mozilla Public License provide software developers with the ability to use the
 		product royalty free to develop both open-source and closed-source (proprietary) applications.</p>

		<p>Developers may also modify the source code to the Echo framework itself, but in this case
		are required to submit their changes back to the community. If desired, a developer may choose
		to instead license the Echo under the GNU Lesser General Public License or
		the GNU General Public License. Use of the GNU licenses is entirely optional.</p>
 		
 	</div>
 	
  </div>
</div>

---
title: About Echo3
---

## About Echo3

> <p style="font-size: 14px; font-weight: normal; line-height: 20px">
> Echo is an open-source framework for developing rich web applications. From the 
> developer's perspective, Echo behaves as a user interface toolkit -- like Swing or 
> Eclipse SWT. 
> 
> AJAX technology is employed to deliver a user experience to web clients that 
> approaches that of desktop-based applications. Echo applications can be created 
> entirely in server-side Java code using a component-oriented and event-driven 
> API or as client-side applications written in JavaScript.
> </p>

### Why Echo?

Though MVC and Swing are well established and well known, most web application
frameworks on the market are still stuck in the paradigm of page-flow oriented
design principles and require a heavy mixture of different technologies like
XML, Java, JSP, Tag libraries, etc.
This has heavy implications on the development process as it disables full
reuse but requires to generate, write and maintain many different artifacts
during the whole process. Think of JSP template files, XML based page flow
descriptions, required form beans, and so on: All of these must be written,
maintained and kept in sync for every dialog of your project.

In contrast Echo offers a very efficient and sophisticated way to implement
and design complex real-world applications in pure Java, enabling to fully
leverage modern software design principles like inheritance, component-
oriented design, refactoring and all the others without making a stop on the
web tier. Echo3's Java API is robust, has a low footprint (two JAR files
with less than 1 MB) and no external dependencies other than a Java servlet
container to deploy the application.

### Two Frameworks in One

Echo can be thought of as being [**two frameworks in one**](<%= url_for '/documentation/guides/architecture.html'%>):
a client-side JavaScript framework and a server-side Java framework. If desired,
developers can choose one of the two frameworks and create applications without ever learning the other.

--------

<div class="row">
	<div class="col-lg-6">
		<h3 class="text-center">Server-Side Java Development</h3>
		<p>Echo provides an entirely Java-based API for application development. The 
		  Server-side framework makes use of a derivative of the client-side framework 
		  to render the state of the server-side application remotely.</p>
		  
		  <p>The only exception which requires JavaScript knowledge is in the case where the 
		  developer wishes to extend the framework by creating components that render 
		  custom XML/HTML/JavaScript code.</p>
	</div>
	
	<div class="col-lg-6">
		<h3 class="text-center">Client-Side JavaScript Development</h3>
		<p>Echo3 applications may also be developed entirely in JavaScript and can function 
		  without any server round trips. This allows to shift between Server-Side and 
		  Client-Side Web Application paradigms.</p>
		  
		  <p>It also allows developers to write server-side logic
		  in the language or framework that suits them  best and connect it to their
		  user interface by techniques such as Ajax or WebSocket.</p>
		  <p>
		  	Echo3 client-side applications are written in CoreJS, a JavaScript library that helps organizing and structuring code
		  	and enables developers to write enterprise applications in JavaScript more easily.
		  </p>
	</div>
</div>

<div class="row">
	<div class="col-lg-6">

			<div class="highlight java "><div class="scroller"><div class="CodeRay"><div class="code">
<pre>
<span class="directive">public</span> <span class="type">class</span> <span class="class">HelloWorldApp</span> <span class="directive">extends</span> ApplicationInstance {
    <span class="directive">public</span> <span class="predefined-type">Window</span> init() {
        <span class="predefined-type">Window</span> window = <span class="keyword">new</span> <span class="predefined-type">Window</span>();

        ContentPane contentPane = <span class="keyword">new</span> ContentPane();
        window.setContent(contentPane);

        <span class="predefined-type">Label</span> label = <span class="keyword">new</span> <span class="predefined-type">Label</span>(<span class="string"><span class="delimiter">"</span><span class="content">Hello, world!</span><span class="delimiter">"</span></span>);
        contentPane.add(label);

        <span class="keyword">return</span> window;
    }
}
</pre></div></div></div></div>

	</div>
	
	<div class="col-lg-6">

				<div class="highlight javascript "><div class="scroller"><div class="CodeRay"><div class="code">
<pre>
HelloWorldApp = Core.extend(Echo.Application, {
    <span class="predefined">$construct</span>: <span class="keyword">function</span>() {
        Echo.Application.call(<span class="local-variable">this</span>);
        <span class="keyword">var</span> label = <span class="keyword">new</span> Echo.Label({
            <span class="key">text</span>: <span class="string"><span class="delimiter">"</span><span class="content">Hello, world!</span><span class="delimiter">"</span></span>
        });
        <span class="local-variable">this</span>.rootComponent.add(label);
    }
});
</pre></div></div></div></div>

	</div>
</div>

### Features

<style type="text/css">
	.nav-tabs > li, .nav-pills > li {
	    float:none;
	    display:inline-block;
	    *display:inline; /* ie7 fix */
	     zoom:1; /* hasLayout ie7 trigger */
	}
	
	.nav-tabs, .nav-pills {
	    text-align:center;
	}
</style>
<div style="min-height: 400px" class="tabbable"> 
  <ul class="nav nav-tabs">
    <li class="active"><a href="#tab3" data-toggle="tab"><strong>Improved User Experience</strong></a></li>
    <li><a href="#tab4" data-toggle="tab"><strong>Enterprise JavaScript</strong></a></li>
    <li><a href="#tab5" data-toggle="tab"><strong>Extensible with new Components</strong></a></li>
    <li><a href="#tab6" data-toggle="tab"><strong>Free and Open-Source</strong></a></li>
  </ul>
  <div style="margin-top: 5px; padding: 5px" class="tab-content">

    <div class="tab-pane active" id="tab3">
    	<ul>
  		<li><strong>Single-Page Application:</strong>   
		    <p>Echo3 applications are displayed in a single browser page that
		    doesn't change and so users get the fluid experience of traditional desktop applications.
		   </li>
		<li><strong>Reduced Bandwidth Requirements:</strong>   
		    <p>Echo3 uses much less bandwidth than classic page-oriented applications because
		    only the differences of UI states are transmitted to the browser as deltas.</p>
		    </li> 
		<li><strong>Reduced Server Load:</strong>   
		    <p>Due to the fact that the server is no longer rendering HTML, it has quite 
		    a bit less work to do. The reduced bandwidth usage means less server CPU 
		    and memory utilization for rendering.</p>
		    </li>
		<li><strong>Keyboard Navigation / Focus Management:</strong>   
		    <p>Focus amongst components is now fully tracked. Echo does away with the 
		    practice of using sequential tab index numbers to control focus order, 
		    instead presenting next/previous element focus events to components for a 
		    more intuitive user interface. Components that have multiple "focus points" 
		    especially benefit from this feature.</p>
		    </li>
		</ul>

    </div>
    <div class="tab-pane" id="tab4">
	  <p>Echo3 is built atop the CoreJS JavaScript Library, which provides cross-platform APIs
	  for building JavaScript objects and interfacing with web browser features (CSS/DOM).
	  CoreJS enables developers to write JavaScript which is more similar to modern object-oriented programming languages such as Java.
	  </p> 
	
	  <p>The CoreJS Library imposes no dependencies or modifications to existing
	  JavaScript namespaces and provides the following features:</p>
	
	  <ul>
	   <li><strong>Class-based JavaScript Inheritance</strong></li>  
	   <li><strong>Virtual and Final JavaScript Properties</strong></li> 
	   <li><strong>Method References</strong></li>
	  </ul>
	  
	  <p><a>CoreJS documentation</a></p>
	  
    </div>
    
 	<div class="tab-pane" id="tab5">
 		<p>Additional Echo3 UI components can be written in JavaScript and used immediately 
 		  in client-side JavaScript applications. If you plan to use your new component in server-side
 		  Java, you only have to write a simple Java wrapper that exposes all the properties and listener methods
 		  you defined in the JavaScript-based component.</p>
 		  
 		  <p>The properties sent between client and server can be automatically serialized 
		  between Java, XML, and JavaScript. The serialization architecture is 
		  extensible--serialization code for new object types may be added by the 
		  developer. In many cases developers don't have to do anything.</p>
		 
		  <p>Serializing components and commands between client and server is performed 
		  automatically using the built-in serialization architecture. The component 
		  developer only need specify which properties should be sent (for components, 
		  all local style properties are automatically sent).</p>
		  
		  <p><a href="<%= url_for '/documentation/guides/components.html'%>">Learn more about component authoring</a></p>
 	</div>
 	
 	 <div class="tab-pane" id="tab6">
 		<p>
 		Echo is licensed under the terms of the open-source
 		<a href="https://github.com/echo3/echo3/blob/master/resource/Licensing/MozillaPublicLicense.txt">Mozilla Public License</a>.
 		The terms of the Mozilla Public License provide software developers with the ability to use the
 		product royalty free to develop both open-source and closed-source (proprietary) applications.</p>

		<p>Developers may also modify the source code to the Echo framework itself, but in this case
		are required to submit their changes back to the community. If desired, a developer may choose
		to instead license the Echo under the
		<a href="https://github.com/echo3/echo3/blob/master/resource/Licensing/GNULesserGeneralPublicLicense.txt">GNU Lesser General Public License</a> or
		the <a href="https://github.com/echo3/echo3/blob/master/resource/Licensing/GNUGeneralPublicLicense.txt">GNU General Public License</a>. Use of the GNU licenses is entirely optional.</p>
 		
 		<p><a href="<%= url_for '/downloads.html' %>">Downloads</a></p>
 	</div>
 	
  </div>
</div>


